import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

# Function to preprocess text
def preprocess_text(text):
    stop_words = set(stopwords.words('english'))
    tokens = word_tokenize(text.lower())
    filtered_tokens = [word for word in tokens if word.isalnum() and word not in stop_words]
    return ' '.join(filtered_tokens)

# Function to get the top N most similar reviews based on user input
def get_top_similar_reviews(user_input, top_n, vectorizer, tfidf_matrix, reviews):
    # Preprocess user input
    user_input = preprocess_text(user_input)
    
    # Transform user input to vector
    user_vector = vectorizer.transform([user_input])
    
    # Calculate cosine similarity
    similarity = cosine_similarity(user_vector, tfidf_matrix).flatten()

    # Get the indices of the top reviews
    top_indices = similarity.argsort()[-top_n:][::-1]

    # Get the actual reviews based on the indices
    top_reviews = reviews['Review'].iloc[top_indices].tolist()

    return top_reviews

# Load reviews data
def load_reviews_data(file_path):
    return pd.read_excel(file_path)


file_path = r'C:\Users\pv437\Desktop\Data Scince Folder\Projects\Project 2\hotel_reviews.xlsx'
    
# Load reviews data
reviews = load_reviews_data(file_path)
    
# Initialize TfidfVectorizer
vectorizer = TfidfVectorizer(stop_words='english')
    
# Preprocess and fit-transform reviews data
tfidf_matrix = vectorizer.fit_transform(reviews['Review'].apply(preprocess_text))
    
# Example usage of the function
user_input = input("Enter your Word to search in Reviews: ")
top_n = int(input("Enter the number of top similar reviews to retrieve: "))  # Prompt user for top_n
top_reviews = get_top_similar_reviews(user_input, top_n, vectorizer, tfidf_matrix, reviews)
print("Top", top_n, "similar reviews:")
for i, review in enumerate(top_reviews, 1):
    print(f"{i}. {review}")
